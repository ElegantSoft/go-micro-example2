// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/client.proto

package client

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Client service

func NewClientEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Client service

type ClientService interface {
	Call(ctx context.Context, in *Empty, opts ...client.CallOption) (*UsernameResponse, error)
}

type clientService struct {
	c    client.Client
	name string
}

func NewClientService(name string, c client.Client) ClientService {
	return &clientService{
		c:    c,
		name: name,
	}
}

func (c *clientService) Call(ctx context.Context, in *Empty, opts ...client.CallOption) (*UsernameResponse, error) {
	req := c.c.NewRequest(c.name, "Client.Call", in)
	out := new(UsernameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Client service

type ClientHandler interface {
	Call(context.Context, *Empty, *UsernameResponse) error
}

func RegisterClientHandler(s server.Server, hdlr ClientHandler, opts ...server.HandlerOption) error {
	type client interface {
		Call(ctx context.Context, in *Empty, out *UsernameResponse) error
	}
	type Client struct {
		client
	}
	h := &clientHandler{hdlr}
	return s.Handle(s.NewHandler(&Client{h}, opts...))
}

type clientHandler struct {
	ClientHandler
}

func (h *clientHandler) Call(ctx context.Context, in *Empty, out *UsernameResponse) error {
	return h.ClientHandler.Call(ctx, in, out)
}
